# A2A System Startup Script
# „Ç®„Éº„Ç∏„Çß„É≥„ÉàÈñìÈÄö‰ø°„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

param(
    [string]$Mode = "all"  # all, broker, workers, test
)

$ErrorActionPreference = "Stop"

# Ëâ≤‰ªò„ÅçÂá∫ÂäõÈñ¢Êï∞
function Write-ColorOutput {
    param([string]$Text, [string]$Color = "White")
    Write-Host $Text -ForegroundColor $Color
}

# „Éó„É≠„Çª„Çπ„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞
function Test-ProcessRunning {
    param([string]$ProcessName)
    $process = Get-Process -Name $ProcessName -ErrorAction SilentlyContinue
    return $null -ne $process
}

# Áí∞Â¢ÉÂ§âÊï∞„Çí„É≠„Éº„Éâ
function Load-Environment {
    Write-ColorOutput "`nüì¶ Loading environment variables..." "Cyan"
    
    $envFile = "$PSScriptRoot\..\\.env"
    if (Test-Path $envFile) {
        Get-Content $envFile | ForEach-Object {
            if ($_ -match '^([^#=]+)=(.*)$') {
                $key = $matches[1].Trim()
                $value = $matches[2].Trim()
                [Environment]::SetEnvironmentVariable($key, $value, "Process")
                Write-ColorOutput "  ‚úÖ $key loaded" "Green"
            }
        }
    }
    else {
        Write-ColorOutput "  ‚ö†Ô∏è .env file not found!" "Yellow"
        Write-ColorOutput "  Please run SET-REAL-API-KEYS.ps1 first" "Yellow"
        exit 1
    }
}

# „Éñ„É≠„Éº„Ç´„ÉºËµ∑Âãï
function Start-Broker {
    Write-ColorOutput "`nüåê Starting ZeroMQ Message Broker..." "Cyan"
    
    $brokerScript = "$PSScriptRoot\zmq_broker\broker.py"
    if (Test-Path $brokerScript) {
        Start-Process -FilePath "C:\Python313\python.exe" `
                     -ArgumentList $brokerScript `
                     -WorkingDirectory "$PSScriptRoot\zmq_broker" `
                     -NoNewWindow
        
        Start-Sleep -Seconds 2
        Write-ColorOutput "  ‚úÖ Broker started on ports 5555-5557" "Green"
    }
    else {
        Write-ColorOutput "  ‚ùå Broker script not found!" "Red"
        exit 1
    }
}

# „Ç™„Éº„Ç±„Çπ„Éà„É¨„Éº„Çø„ÉºËµ∑Âãï
function Start-Orchestrator {
    Write-ColorOutput "`nüé≠ Starting Orchestrator..." "Cyan"
    
    $orchestratorScript = "$PSScriptRoot\orchestrator\orchestrator.py"
    if (Test-Path $orchestratorScript) {
        Start-Process -FilePath "C:\Python313\python.exe" `
                     -ArgumentList $orchestratorScript `
                     -WorkingDirectory "$PSScriptRoot\orchestrator" `
                     -NoNewWindow
        
        Start-Sleep -Seconds 2
        Write-ColorOutput "  ‚úÖ Orchestrator started on port 5558" "Green"
    }
    else {
        Write-ColorOutput "  ‚ùå Orchestrator script not found!" "Red"
        exit 1
    }
}

# „ÉØ„Éº„Ç´„ÉºËµ∑Âãï
function Start-Workers {
    Write-ColorOutput "`nü§ñ Starting AI Workers..." "Cyan"
    
    # GPT-5 Worker
    $gpt5Script = "$PSScriptRoot\workers\gpt5_worker.py"
    if (Test-Path $gpt5Script) {
        Start-Process -FilePath "C:\Python313\python.exe" `
                     -ArgumentList $gpt5Script `
                     -WorkingDirectory "$PSScriptRoot\workers" `
                     -NoNewWindow
        
        Start-Sleep -Seconds 1
        Write-ColorOutput "  ‚úÖ GPT-5 Worker started" "Green"
    }
    else {
        Write-ColorOutput "  ‚ö†Ô∏è GPT-5 Worker script not found" "Yellow"
    }
    
    # Grok4 Worker
    $grok4Script = "$PSScriptRoot\workers\grok4_worker.py"
    if (Test-Path $grok4Script) {
        Start-Process -FilePath "C:\Python313\python.exe" `
                     -ArgumentList $grok4Script `
                     -WorkingDirectory "$PSScriptRoot\workers" `
                     -NoNewWindow
        
        Start-Sleep -Seconds 1
        Write-ColorOutput "  ‚úÖ Grok4 Worker started" "Green"
    }
    else {
        Write-ColorOutput "  ‚ö†Ô∏è Grok4 Worker script not found" "Yellow"
    }
}

# Claude„Éñ„É™„ÉÉ„Ç∏Ëµ∑Âãï
function Start-ClaudeBridge {
    Write-ColorOutput "`nüåâ Starting Claude Bridge..." "Cyan"
    
    $bridgeScript = "$PSScriptRoot\bridges\claude_bridge.py"
    if (Test-Path $bridgeScript) {
        Start-Process -FilePath "C:\Python313\python.exe" `
                     -ArgumentList $bridgeScript `
                     -WorkingDirectory "$PSScriptRoot\bridges" `
                     -NoNewWindow
        
        Start-Sleep -Seconds 1
        Write-ColorOutput "  ‚úÖ Claude Bridge started" "Green"
        Write-ColorOutput "  üì• Inbox: $PSScriptRoot\shared\claude_inbox" "Gray"
        Write-ColorOutput "  üì§ Outbox: $PSScriptRoot\shared\claude_outbox" "Gray"
    }
    else {
        Write-ColorOutput "  ‚ö†Ô∏è Claude Bridge script not found" "Yellow"
    }
}

# „ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
function Send-TestMessage {
    Write-ColorOutput "`nüß™ Sending test message..." "Cyan"
    
    $testMessage = @{
        type = "QUESTION"
        sender = "test_client"
        target = "any"
        question = "A2A„Ç∑„Çπ„ÉÜ„É†„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü"
        timestamp = (Get-Date -Format "yyyy-MM-ddTHH:mm:ss")
    } | ConvertTo-Json -Depth 10
    
    $inboxDir = "$PSScriptRoot\shared\claude_inbox"
    if (-not (Test-Path $inboxDir)) {
        New-Item -ItemType Directory -Path $inboxDir -Force | Out-Null
    }
    
    $testFile = "$inboxDir\test_message_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"
    $testMessage | Out-File -FilePath $testFile -Encoding UTF8
    
    Write-ColorOutput "  ‚úÖ Test message sent to: $testFile" "Green"
    Write-ColorOutput "  üëÄ Check outbox for responses" "Yellow"
}

# „Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖãË°®Á§∫
function Show-SystemStatus {
    Write-ColorOutput "`nüìä System Status:" "Cyan"
    Write-ColorOutput "=================================" "Gray"
    
    # Python„Éó„É≠„Çª„Çπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    $pythonProcesses = Get-Process -Name "python*" -ErrorAction SilentlyContinue
    
    if ($pythonProcesses) {
        Write-ColorOutput "  ‚úÖ Python processes running: $($pythonProcesses.Count)" "Green"
        $pythonProcesses | ForEach-Object {
            Write-ColorOutput "    - PID: $($_.Id) | CPU: $($_.CPU)" "Gray"
        }
    }
    else {
        Write-ColorOutput "  ‚ö†Ô∏è No Python processes found" "Yellow"
    }
    
    Write-ColorOutput "`nüìÅ Log Files:" "Cyan"
    Get-ChildItem -Path $PSScriptRoot -Filter "*.log" -Recurse | ForEach-Object {
        Write-ColorOutput "  - $($_.Name)" "Gray"
    }
}

# „É°„Ç§„É≥Âá¶ÁêÜ
function Main {
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan -NoNewline
    Write-ColorOutput "=" -ForegroundColor Cyan
    
    Write-ColorOutput "üöÄ A2A System Launcher" "White"
    Write-ColorOutput "Agent-to-Agent Communication System" "Gray"
    Write-ColorOutput "=================================" "Cyan"
    Write-ColorOutput "Mode: $Mode" "Yellow"
    
    # Áí∞Â¢ÉÂ§âÊï∞„Çí„É≠„Éº„Éâ
    Load-Environment
    
    switch ($Mode) {
        "all" {
            Start-Broker
            Start-Sleep -Seconds 2
            Start-Orchestrator
            Start-Sleep -Seconds 2
            Start-Workers
            Start-Sleep -Seconds 2
            Start-ClaudeBridge
            Start-Sleep -Seconds 3
            Send-TestMessage
            Show-SystemStatus
        }
        "broker" {
            Start-Broker
            Show-SystemStatus
        }
        "workers" {
            Start-Workers
            Show-SystemStatus
        }
        "test" {
            Send-TestMessage
            Show-SystemStatus
        }
        default {
            Write-ColorOutput "Unknown mode: $Mode" "Red"
            Write-ColorOutput "Available modes: all, broker, workers, test" "Yellow"
            exit 1
        }
    }
    
    Write-ColorOutput "`n‚úÖ A2A System startup complete!" "Green"
    Write-ColorOutput "Press Ctrl+C to stop all processes" "Yellow"
    
    # „Éó„É≠„Çª„ÇπÁõ£Ë¶ñ„É´„Éº„Éó
    if ($Mode -eq "all") {
        while ($true) {
            Start-Sleep -Seconds 5
            # Á∞°ÊòìÁöÑ„Å™„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
            $pythonCount = (Get-Process -Name "python*" -ErrorAction SilentlyContinue).Count
            if ($pythonCount -lt 3) {
                Write-ColorOutput "`n‚ö†Ô∏è Warning: Expected at least 3 Python processes, found $pythonCount" "Yellow"
            }
        }
    }
}

# „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
try {
    Main
}
catch {
    Write-ColorOutput "`n‚ùå Error: $_" "Red"
    exit 1
}
finally {
    # „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    Write-ColorOutput "`nüõë Shutting down A2A System..." "Yellow"
    Get-Process -Name "python*" -ErrorAction SilentlyContinue | Stop-Process -Force
    Write-ColorOutput "Goodbye!" "Cyan"
}