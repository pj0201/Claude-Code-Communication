{
  "type": "QUESTION",
  "sender": "worker3",
  "target": "gpt5_001",
  "title": "Issue 自律実行設計 - シミュレーション検証",
  "question": "Issue コンテンツを Claude Code が自動読み込みして実行する設計を詳細シミュレーションしました。以下の項目について意見をください：\n\n【設計の全体フロー】\n1. ユーザーが LINE でメッセージ送信（いつくるか不確定）\n2. Bridge が GitHub Issue 自動作成\n3. Listener が GITHUB_ISSUE_CREATED 検出 → 即応答生成\n4. ★新規★ Listener が tmux send-keys で Claude Code ペイン(0.1)に /process-issue #14 を送信\n5. ペイン 0.1 の process-issue.sh が実行 → Issue 本文取得・表示\n6. Claude Code がプロンプトとして Issue 内容を確認 → 実装実行\n7. 結果を Outbox に出力 → Bridge が LINE に返信\n\n【発見した重要な問題】\n- Hook（user-prompt-submit.sh）は「Claude Code がプロンプト送信時」に実行されるため、Issue 作成直後は trigger されない\n- 解決策：Listener または Bridge が直接 tmux send-keys を実行する必要がある\n\n【実装方針の選択】\n【方法A】Bridge が直接 tmux send-keys を実行\n- Bridge が Issue 作成時点で即座に送信\n- メリット：Bridge が制御、シンプル\n- デメリット：Bridge 責務増大\n\n【方法B】Listener が tmux send-keys を実行（推奨）\n- Listener が GITHUB_ISSUE_CREATED 検出時に送信\n- メリット：Listener は既に issue_number を知っている、Bridge 責務維持\n- デメリット：Listener が TMUX 依存\n\n【懸念事項 - 要確認】\n1. ペイン 0.1 の現在の状態は何か？\n   - Bash シェル？→ `/process-issue #14` 直接実行可能\n   - Python REPL？→ Python 構文エラー\n   - Claude Code プロンプト待ち受け？→ プロンプトの一部として受け取られる\n\n2. process-issue.sh の実装方法\n   - gh cli（GitHub CLI）を使用？\n   - Python + requests 使用？\n   - 既存の GitHub API 接続を流用？\n\n3. 複数 Issue の並行処理\n   - Issue #14 処理中に Issue #15 が来たら？\n   - STDIN が混ざる可能性がある\n   - 初版は「1つ処理に集中」でいい？\n\n4. Listener の tmux send-keys 実行は安全か？\n   - プロセス間通信の観点で問題ないか？\n   - TMUX が起動していない場合の対応は？\n\n【質問】\n1. この設計フロー全体で問題はないか？\n2. 方法A vs 方法B、どちらが推奨か？\n3. ペイン 0.1 の状態についてのアドバイスは？\n4. process-issue.sh の実装方法についてのアドバイスは？\n5. その他懸念事項の対応方法は？"
}
