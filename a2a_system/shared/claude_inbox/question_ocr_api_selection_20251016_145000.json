{
  "type": "QUESTION",
  "sender": "claude_code",
  "target": "gpt5",
  "message_id": "question_ocr_api_selection_20251016_145000",
  "timestamp": "2025-10-16T14:50:00",
  "question": "領収書OCRアプリのバックエンド実装に向けて、複数のOCR APIの比較検討をお願いします。\n\n## 背景\n\nReact + Node.js で構成された領収書OCRアプリを開発しています。\nフロントエンドは完成していますが、バックエンドのOCR処理が未実装です。\n\n## 要件\n\n1. **言語**: 日本語領収書の読み取り\n2. **精度**: 店舗名、金額、日付などの正確な抽出が必須\n3. **コスト**: できるだけ安価であることを希望\n4. **品質**: 低コスト選択により品質低下のリスク許容度は低い（品質重視）\n5. **実装難度**: Node.js バックエンドに統合可能\n\n## 候補API一覧\n\n### 1. Google Cloud Vision API\n**コスト**: 画像1,000件あたり $1.50（テキスト検出）\n- 初月無料クレジット $300\n- 月間1,000件なら月額 $1.50程度\n\n**特徴**:\n- OCR精度：業界最高レベル\n- 日本語対応：優秀\n- 実装：Node.js ライブラリあり\n- 応答時間：1秒以内\n\n### 2. Claude Vision API (Anthropic)\n**コスト**: 入力画像の解像度に応じた トークン課金\n- 領収書スキャン画像（A4 300DPI）: 約 500-800 トークン/枚\n- 月間1,000件なら月額 $15-24程度（入力: $3/100万トークン）\n\n**特徴**:\n- OCR精度：高い（特にテキスト理解が強い）\n- 日本語対応：優秀\n- 実装：Claude SDK で統合可能\n- 応答時間：2-3秒\n- カテゴリ判定も同時に可能\n\n### 3. Azure Computer Vision\n**コスト**: Pay-as-you-go $1-2/1,000画像\n- 無料枠：月間5,000トランザクション\n\n**特徴**:\n- OCR精度：高い\n- 日本語対応：良好\n- 実装：Node.js SDK あり\n- 無料枠が大きい\n\n### 4. Tesseract（オープンソース）\n**コスト**: 無料\n\n**特徴**:\n- OCR精度：Google/Azure より劣る\n- 日本語対応：言語パック必要（精度は限定的）\n- 実装：Node.js バインディングあり\n- サーバー側で処理（外部API不要）\n- セットアップが必要\n\n### 5. Amazon Textract\n**コスト**: 無料枠後 $1.50/100ページ\n- 月間100ページまで無料\n\n**特徴**:\n- OCR精度：高い（テーブル検出も可）\n- 日本語対応：良好\n- 実装：AWS SDK で統合\n- AWS 環境が必要\n\n### 6. PaddleOCR（オープンソース）\n**コスト**: 無料\n\n**特徴**:\n- OCR精度：Tesseract より良い\n- 日本語対応：対応している\n- 実装：Python ベース（Node.js 用に別途対応が必要）\n- サーバー側で処理\n- セットアップが複雑\n\n## 質問ポイント\n\n### 1. コスト vs 品質のトレードオフ\nどのAPIが最適か？理由は？\n\n### 2. 日本語領収書の実装精度\n各APIで以下の項目の抽出精度はどの程度か？\n- 日付（YYYY/MM/DD 形式）\n- 店舗名（日本語、英語混在）\n- 金額（\\xxxxxx 形式、小数点対応）\n- カテゴリ判定（自動判定の精度）\n\n### 3. バックエンド実装の推奨\nNode.js + Express での実装を想定した場合、推奨APIは？\n理由（統合難度、ライブラリの充実度）は？\n\n### 4. 実装パターン\n以下のパターンのどれが最適か？\n- **パターンA**: Google Vision API 直接呼び出し（最安、高精度）\n- **パターンB**: Claude Vision API（テキスト理解力が強い、中価格）\n- **パターンC**: ローカル処理（Tesseract/PaddleOCR）（初期投資 vs 運用コスト）\n\n### 5. エラーハンドリング\nOCR結果の信頼度スコアやエラー検出は？\nどのAPIが「読み取り失敗」を明確に判定できるか？\n\n### 6. リスク評価\n各APIの導入リスク（API廃止、仕様変更、価格改定など）は？\n\n## システム要件\n\n- **フロントエンド**: React 18 + TypeScript\n- **バックエンド**: Node.js + Express\n- **データベース**: ローカルストレージ（localStorage）\n- **スケール**: 初期は月間1,000-5,000件程度を想定\n\n## 最終判断軸\n\n1. **日本語OCR精度**: 最優先（品質重視）\n2. **実装の容易さ**: 次点\n3. **コスト**: 最後（ただし妥当な範囲）\n\n技術的アドバイスとともに、推奨APIの選定理由を詳しく教えてください。",
  "context": {
    "project": "ocr-receipt-buddy",
    "backend_status": "NOT_IMPLEMENTED",
    "frontend_status": "COMPLETE",
    "priority": "OCR_API_SELECTION",
    "scale": "1000-5000_receipts_per_month"
  }
}
